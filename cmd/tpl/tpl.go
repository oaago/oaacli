package tpl

var ApiTPL = `// Code generated by oaacli DO NOT EDIT.
// Code generated by oaacli DO NOT EDIT.
// Code generated by oaacli DO NOT EDIT.
package {{.Package}}
import (
	"{{.Module}}/internal/service/{{.Package}}/{{.Method}}"
	"github.com/go-playground/validator/v10"
	"github.com/oaago/cloud/logx"
	"github.com/oaago/server/oaa"
	"github.com/oaago/server/oaa/translator"
)

// @Summary ping example
// @Schemes
// @Description do ping
// @Tags example
// @Accept json
// @Produce json
// @Success 200 {object} {{.UpPackage}}{{.UpMethod}}Res
// @Router /{{.Package}}/{{.Method}} [{{.Met}}]
func {{.UpPackage}}{{.UpMethod}}Handler(c *oaa.Ctx) {
	// 实例化service
	{{.Package}}Srv := {{.Package}}.NewService{{.UpPackage}}()
	if err := c.ShouldBind(&{{.Package}}Srv.{{.UpPackage}}{{.UpMethod}}Req); err != nil {
		// 获取validator.ValidationErrors类型的errors
		errs, ok := err.(validator.ValidationErrors)
		if !ok {
			// 非validator.ValidationErrors类型错误直接返回
			c.Return(400, errs.Translate(translator.Trans))
			return
		}
		return
	}
    {{.UpPackage}}{{.UpMethod}}Res, err := {{.Package}}Srv.{{.UpPackage}}{{.UpMethod}}Service()
	if err != nil {
		c.Return(10006)
		return
	}
	logx.Logger.Info("数据请求成功", {{.UpPackage}}{{.UpMethod}}Res)
	c.Return(200, {{.Package}}Srv.{{.UpPackage}}{{.UpMethod}}Res)
	return
}
`

var SRVTPL = `package {{.Package}}

func (u *{{.UpPackage}}) {{.UpPackage}}{{.UpMethod}}Service() ({{.UpPackage}}{{.UpMethod}}Res, error) {
	return u.{{.UpPackage}}{{.UpMethod}}Res,nil
}
`

var RPCSRVTPL = `package {{.Package}}
import (
	"context"
	rpc_{{.RpcName}}_{{.UpMethod}} "{{.Module}}/internal/api/rpc/{{.RpcName}}/{{.Method}}"
	"github.com/oaago/cloud/logx"
)
func (u *{{.UpPackage}}) {{.UpPackage}}{{.UpMethod}}Service(ctx context.Context, request *rpc_{{.RpcName}}_{{.UpMethod}}.{{.UpRpcName}}{{.UpMethod}}Request) (*rpc_{{.RpcName}}_{{.UpMethod}}.{{.UpRpcName}}{{.UpMethod}}Reply, error) {
	//TODO implement me
	logx.Logger.Info(request)
	// 调用其他rpc 服务的示例
	// 	res := rpc_fff_Ddd.NewRpcFffDddClient(rpc_fff_Ddd.RpcClientType{
	//		EtcdAddr:          "http://127.0.0.1:2379",
	//		RemoteServiceName: op.ConfigData.Server.Name,
	//	})
	//  c, cancel := context.WithTimeout(context.Background(), time.Second*2)
	//	resp, err := res.RpcFffDddService(c, &rpc_fff_Ddd.FffDddRequest{
	//		Name: "22222",
	//	})
	//  defer cancel()
	//	logx.Logger.Info(resp, err)
	return &rpc_{{.RpcName}}_{{.UpMethod}}.{{.UpRpcName}}{{.UpMethod}}Reply{}, nil
}
`

var TYPESTPL = `
package {{.Package}}

type {{.UpPackage}} struct {
	Service{{.UpPackage}}
	{{.UpPackage}}{{.UpMethod}}Res
  {{.UpPackage}}{{.UpMethod}}Req
}

type {{.UpPackage}}{{.UpMethod}}Res struct{}

type {{.UpPackage}}{{.UpMethod}}Req struct{}

type Service{{.UpPackage}} interface {
	//{{.Func}}  @Router /{{.Package}}/{{.Func}} [{{.Method}}]
	//{{.Func}}()
}

func NewService{{.UpPackage}}() *{{.UpPackage}} {
	return &{{.UpPackage}}{}
}
`

var DAOTYPESTPL = `
package {{.Package}}

type {{.UpPackage}} struct {

}
`

var RpcTYPESTPL = `
package {{.Package}}

type {{.UpPackage}} struct {
}

func NewService{{.UpPackage}}() *{{.UpPackage}} {
	return &{{.UpPackage}}{}
}
`

var ROUTERTPL = `// Code generated by oaacli DO NOT EDIT.
// Code generated by oaacli DO NOT EDIT.
// Code generated by oaacli DO NOT EDIT.
package router
import (
	"github.com/oaago/server/oaa"
	middleware_http "{{.Module}}/internal/middleware/http"
    {{range $index, $item := .MapHandlerMap}}
	{{$item.HttpDir}}{{$item.UpMethod}} "{{$item.Module}}/internal/api/http/{{$item.HttpDir}}/{{$item.UpMethod}}" //{{$item}}
    {{end}}
)

func LoadRouterMap() oaa.MapHttpRoute {
	{{if eq .MiddlewareLen 0}}
	// Pid := middleware_http.NewPid()
	{{else}}  
	Pid := middleware_http.NewPid()
	{{end}}
	m := oaa.MapHttpRoute{
	{{range $index, $item := .MapHandlerMap}}
		"{{$item.Url}}": {
			{{range $index, $it := $item.Middleware}}Pid.{{$it}}{{end}}
			{{$item.HttpDir}}{{$item.UpMethod}}.{{$item.Handler}}Handler,
		},
	{{end}}
	}
	return m
}
`

var RPCROUTERTPL = `// Code generated by oaacli DO NOT EDIT.
// Code generated by oaacli DO NOT EDIT.
// Code generated by oaacli DO NOT EDIT.
package router
import (
	"google.golang.org/grpc"
	grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpc_validator "github.com/grpc-ecosystem/go-grpc-middleware/validator"
{{range $index, $item := .MapHandlerMap}}
	{{$item.UpPackage}}{{$item.UpMethod}} "{{$item.Module}}/internal/api/rpc/{{$item.Package}}/{{$item.Method}}"
	SRV{{$item.UpPackage}}{{$item.UpMethod}} "{{$item.Module}}/internal/service/rpc_{{$item.Package}}/{{$item.Method}}"
{{end}}
)

func RegisterRpcGenRouter() *grpc.Server {
	s := grpc.NewServer(
	grpc.UnaryInterceptor(
		grpc_middleware.ChainUnaryServer(
			grpc_validator.UnaryServerInterceptor(),
		),
	),
	grpc.StreamInterceptor(
		grpc_middleware.ChainStreamServer(
			grpc_validator.StreamServerInterceptor(),
		),
	),
)
{{range $index, $item := .MapHandlerMap}}
	{{$item.UpPackage}}{{$item.UpMethod}}.Register{{$item.UpPackage}}{{$item.UpMethod}}Server(s, SRV{{$item.UpPackage}}{{$item.UpMethod}}.NewServiceRpc{{$item.UpPackage}}())
{{end}}
	return s
}`

var MAINTPL = `package main

import (
	"%package%/internal/consts"
	"%package%/internal/router"
	docs "%package%/docs"
	_ "github.com/oaago/cloud/logx"
	"github.com/oaago/cloud/op"
	"github.com/oaago/server/oaa"
)

func main() {
	op.ConfigData.CodeMap = consts.CODE
	r := oaa.NewRouter(&oaa.ConfigRouter{
		MapHttpRoute: router.LoadRouterMap,
		MapRpcRoute:  router.RegisterRpcGenRouter,
	})
	docs.SwaggerInfo.BasePath = op.ConfigData.Server.BasePath
	oaa.Start(r)
}
`
var DEFIENDJSON = `{
  "http": [
		"get@/app/bbb",
		"post@/ccc/bbb|TT"
  ],
  "rpc": [
		"get&/ccc/ddd",
		"get&/fff/ddd"
  ]
}
`

var CONFIGTPL = `server:
  name: %package%
  port: 9932
  env: local
mysql:
  a: root:root@tcp(127.0.0.1:3306)/a
	b: root:root@tcp(127.0.0.1:3306)/b
nacos:
  ipaddr: nacos.com
  logdir: ./nacos
  cachedir: ./nacos
  dataid: %package%
  group: %package%
redis:
  addr: 127.0.0.1:6937
  password: 123456
  db: 15
`

var CODETPL = `package consts
var CODE = map[int]string{
	20000: "测试",
}
`

var PROTOTPL = `syntax = "proto3";

package rpc.{{.Package}}.{{.Method}};

// 多语言特定包名，用于源代码引用
option go_package = "rpc/{{.Package}}/{{.Method}}";
option java_multiple_files = true;
option java_package = "rpc/{{.Package}}/{{.Method}}";
option objc_class_prefix = "rpc/{{.Package}}/{{.Method}}";
import "github.com/mwitkow/go-proto-validators@v0.3.2/validator.proto";

// 描述该服务的信息
service {{.UpPackage}}{{.UpMethod}} {
  // 描述该方法的功能
  rpc Rpc{{.UpPackage}}{{.UpMethod}}Service ({{.UpPackage}}{{.UpMethod}}Request) returns ({{.UpPackage}}{{.UpMethod}}Reply);
}

message InnerMessage {
  // some_integer can only be in range (1, 100).
  int32 some_integer = 1 [(validator.field) = {int_gt: 0, int_lt: 100}];
  // some_float can only be in range (0;1).
  double some_float = 2 [(validator.field) = {float_gte: 0, float_lte: 1}];
}
message OuterMessage {
  // important_string must be a lowercase alpha-numeric of 5 to 30 characters (RE2 syntax).
  string important_string = 1 [(validator.field) = {regex: "^[a-z]{2,5}$"}];
  InnerMessage inner = 2 [(validator.field) = {msg_exists : true}];
}
// Hello请求参数
message {{.UpPackage}}{{.UpMethod}}Request {
  // 用户名字
  string name = 1;
}
// Hello返回结果
message {{.UpPackage}}{{.UpMethod}}Reply {
  // 结果信息
  string message = 1;
}`

var MIDTPL = `package middleware

import (
"fmt"
"github.com/oaago/server/oaa"
)

type Pid oaa.PartMiddleware
type Gid oaa.GlobalMiddleware

func NewPid() Pid {
	return Pid{}
}
func NewGid() Gid {
	return Gid{}
}

func (Pid) TT(c *oaa.Ctx) {
	fmt.Println("PartMiddleware")
	c.Next()
	fmt.Println("2222")
}

func (Gid) BB(c*oaa.Ctx) {
	fmt.Println("GlobalMiddleware")
	c.Next()
	fmt.Println("4444")
}`

var DAOTPL = `
package {{.Package}}

import (
	"{{.Module}}/internal/model/{{.Package}}_model"
	"{{.Module}}/internal/model/{{.Package}}_query"
	"github.com/oaago/cloud/mysql"
	"github.com/oaago/cloud/redis"
	"gorm.io/gorm"
)

type {{.UpMethod}}Dao struct {
	DB      *gorm.DB
	Query   *{{.Package}}_query.Query
	Table   string
	Columns {{.Package}}_model.{{.UpMethod}}
	RedisClient redis.Cli
}

var (
	model = {{.Package}}_model.{{.UpMethod}}{}
	{{.UpMethod}} = {{.UpMethod}}Dao{
		DB:      mysql.GetDBByName("{{.Package}}"),
		Query:   {{.Package}}_query.Use(mysql.GetDBByName("{{.Package}}")),
		Table:   model.TableName(),
		Columns: {{.Package}}_model.{{.UpMethod}}{},
		RedisClient: *redis.RedisClient,
	}
)
`
